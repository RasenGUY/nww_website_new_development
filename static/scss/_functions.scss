// modules
@use 'sass:color';
@use 'sass:string';
@use 'sass:list';

// all the scss functions used for the css 


// shadows
@function shadows($property, $color, $opacity) {
    
    $shadowColor: color.adjust($color, $alpha: $opacity);
    $prefix: "";

    @if $property == 'btn-sm' {
        $prefix: "2px 2px 3px #{$shadowColor}";
    } 
    @else if $property == 'btn-nm' {
        $prefix: "3px 3px 4px #{$shadowColor}";
    }
    @else if $property == "btn-active" {
        $prefix: "0 0 0 3pt #{$shadowColor}";
    }
    @else if $property == "figure-sm" {
        $prefix: "5px 1.5px 3.5px #{$shadowColor}";
    }
    @else if $property == "figure-nm" {
        $prefix: "1.5px 2.5px 5px #{$shadowColor}";
    }
    @else if $property == "figure-lg" {
        $prefix: "5px 5px 10px #{$shadowColor}";
    }
    @else if $property == "icon-sm" {
        $prefix: "0.75px .75px 1.5px #{$shadowColor}";
    }
    @else if $property == "icon-nm" {
        $prefix: "1px 1px 2px #{$shadowColor}";
    }
    @else if $property == "text-sm" {
        $prefix: "1px 1px 3px #{$shadowColor}";
    }
    @else if $property == "text-nm" {
        $prefix: "2px 2px 5px #{$shadowColor}";
    }
    @else if $property == "form-area" {
        $prefix: "0.5rem 0.6125rem 0.25rem #{$shadowColor}";
    }
            
    @return string.unquote($prefix)

}; // variables: color, opacity

// gradients
@function gradient($type, $direct-size, $colors) {

    $result: "";

    // look for gradient type
    @if $type == "linear" {
        $result: "linear-gradient(#{$direct-size}, ";
    }
    @else {
        $result: "radial-gradient(#{$direct-size}, "
    }

    // add colors
    @each $color in $colors {

        @if list.index($colors, $color) == list.length($colors) {
            $result: $result + $color + ")";
        }
        @else {
            $result: $result + $color + ", ";
        }
    }

    @return string.unquote($result);

}; //type: type of gradient, direction: direction is more then 0, colors: colors to go in the radient

// function for sizing fonts
@function fontDynSize($vwMin, $vwMax, $fontMin, $fontMax) {

    // divide by ten since site base font-size is 65%
    $vwMin: $vwMin / 10;
    $vwMax: $vwMax / 10;
    $fontMin: $fontMin /10;
    $fontMax: $fontMax /10;
    
    // calculate slope and y intersection
    $slope: ($fontMax - $fontMin) / ($vwMax - $vwMin);
    $yInt: -$vwMin * $slope + $fontMin;
    
    // calculate preffered font-size
    $fontPreff: "#{1rem * $yInt} + #{1vw * $slope * 100}";
    
    // property value to be used
    $result: "clamp(#{$fontMin * 1rem}, #{$fontPreff}, #{$fontMax *1rem})";

    @return string.unquote($result);
    
} // dynamically size fonts according to a given minimum and maximum virtual with and max and font min and max -note accepts inputs in px (leave out unit)

// function for creating dynamic sizes for virtual heights 
@function vhDynSize($vwMin, $vwMax, $vhMin, $vhMax){

    // divide by ten since site base font-size is 65%
    $vwMin: $vwMin / 10;
    $vwMax: $vwMax / 10;
    $fontMin: $vhMin / 10;
    $fontMax: $vhMax / 10;
    
    // calculate slope and y intersection
    $slope: ($vhMax - $vhMin) / ($vwMax - $vwMin);
    $yInt: -$vwMin * $slope + $vhMin;
    
    // calculate preffered font-size
    $vhPreff: "#{1rem * $yInt} + #{1vw * $slope * 100}";
    
    // property value to be used
    $result: "clamp(#{$vhMin * 1vh}, #{$vhPreff}, #{$vhMax *1vh})";

    @return string.unquote($result);
}

